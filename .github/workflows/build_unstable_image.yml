name: Build and push image

on:
  push:
    branches:
      - main

env:
  IMG_REGISTRY_HOST: quay.io
  IMG_REGISTRY_ORG: rhn-support-ramdr
  IMG_NAME: kuadrant
  IMG_TAGS: unstable
  TARGET_PLATFORM: linux/amd64,linux/s390x  

jobs:
  build:
    name: Build and push image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        platform: [linux/amd64]
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Determine RAM size and set swap space
        run: |
          # Get the total RAM size in MB
          RAM_SIZE=$(free -m | awk '/^Mem:/{print $2}')
          echo "Total RAM: ${RAM_SIZE} MB"

          # Determine swap space size based on RAM
          if [ "$RAM_SIZE" -le 2048 ]; then
            SWAP_SIZE=2048M  # If RAM is 2GB or less, set swap to 2GB
          elif [ "$RAM_SIZE" -le 8192 ]; then
            SWAP_SIZE=4096M  # If RAM is between 2GB and 8GB, set swap to 4GB
          else
            SWAP_SIZE=8192M  # If RAM is more than 8GB, set swap to 8GB
          fi

          echo "Setting swap space to ${SWAP_SIZE}"
          sudo fallocate -l $SWAP_SIZE /swapfile
          sudo chmod 600 /swapfile
          sudo mkswap /swapfile
          sudo swapon /swapfile
          sudo swapon --show
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: s390x
      - name: Setup buildx
        uses: docker/setup-buildx-action@master
      - name: Log in to Quay
        uses: docker/login-action@v2
        with:
          registry: ${{ env.IMG_REGISTRY_HOST }}
          username: ${{ secrets.IMG_REGISTRY_USERNAME }}
          password: ${{ secrets.IMG_REGISTRY_TOKEN }}
      - name: Setting Quay metadata
        uses: docker/metadata-action@v4
        id: metadata
        with:
          images: |
            ${{ env.IMG_REGISTRY_HOST }}/${{ env.IMG_REGISTRY_ORG }}/${{ env.IMG_NAME }}
          tags: |
            type=raw,value=unstable
      - name: Cache Docker layers
        id: cache
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-build-${{ matrix.platform }}-${{ github.ref }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-build-${{ matrix.platform }}-
      - name: Save restore key
        run: |
          echo "RESTORE_STATE=${{ steps.cache.outputs.cache-hit }}" >> $GITHUB_ENV
          echo "RESTORE_KEY= ${{ steps.cache.outputs.cache-key }}" >> $GITHUB_ENV
      - name: Build and Push Image
        id: build-image
        uses: docker/build-push-action@v2
        with:
          tags: ${{ steps.metadata.outputs.tags }}
          labels: ${{ steps.metadata.outputs.labels }}
          push: true
          build-args: |
            TARGETARCH=${{ matrix.platform }}
          platforms: ${{ matrix.platform }}
          context: .
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: Cleanup Cache
        if: success()  # Only run if the build was successful
        run: |
          echo "Cleaning up cache..."
          chmod +x ./cleanup_cache.sh 
          ./cleanup_cache.sh
        env:
          GH_PAT: ${{ secrets.GH_PAT }}  
          RESTORE_STATE: ${{ env.RESTORE_STATE}}
          RESTORE_KEY: $${{ env.RESTORE_KEY}}
      - name: List cache directory
        run: ls -la /tmp/.buildx-cache
